//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ResultsTracker
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ResultsTracker.ResultsTracker_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[31];
            _typeNameTable[0] = "WinRTXamlToolkit.Controls.Calendar";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Windows.UI.Xaml.Style";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "WinRTXamlToolkit.Controls.CalendarMode";
            _typeNameTable[5] = "System.Enum";
            _typeNameTable[6] = "System.ValueType";
            _typeNameTable[7] = "Object";
            _typeNameTable[8] = "System.DayOfWeek";
            _typeNameTable[9] = "WinRTXamlToolkit.Controls.CalendarSelectionMode";
            _typeNameTable[10] = "System.Nullable`1<System.DateTime>";
            _typeNameTable[11] = "WinRTXamlToolkit.Controls.SelectedDatesCollection";
            _typeNameTable[12] = "System.Collections.ObjectModel.ObservableCollection`1<System.DateTime>";
            _typeNameTable[13] = "System.Collections.ObjectModel.Collection`1<System.DateTime>";
            _typeNameTable[14] = "System.DateTime";
            _typeNameTable[15] = "Int32";
            _typeNameTable[16] = "System.DateTimeKind";
            _typeNameTable[17] = "Int64";
            _typeNameTable[18] = "TimeSpan";
            _typeNameTable[19] = "WinRTXamlToolkit.Controls.CalendarBlackoutDatesCollection";
            _typeNameTable[20] = "System.Collections.ObjectModel.ObservableCollection`1<WinRTXamlToolkit.Controls.CalendarDateRange>";
            _typeNameTable[21] = "System.Collections.ObjectModel.Collection`1<WinRTXamlToolkit.Controls.CalendarDateRange>";
            _typeNameTable[22] = "WinRTXamlToolkit.Controls.CalendarDateRange";
            _typeNameTable[23] = "ResultsTracker.CalendarPage";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[26] = "ResultsTracker.LoginPage";
            _typeNameTable[27] = "ResultsTracker.RTPage";
            _typeNameTable[28] = "ResultsTracker.Common.NavigationHelper";
            _typeNameTable[29] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[30] = "ResultsTracker.MainPage";

            _typeTable = new global::System.Type[31];
            _typeTable[0] = typeof(global::WinRTXamlToolkit.Controls.Calendar);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::WinRTXamlToolkit.Controls.CalendarMode);
            _typeTable[5] = typeof(global::System.Enum);
            _typeTable[6] = typeof(global::System.ValueType);
            _typeTable[7] = typeof(global::System.Object);
            _typeTable[8] = typeof(global::System.DayOfWeek);
            _typeTable[9] = typeof(global::WinRTXamlToolkit.Controls.CalendarSelectionMode);
            _typeTable[10] = typeof(global::System.Nullable<global::System.DateTime>);
            _typeTable[11] = typeof(global::WinRTXamlToolkit.Controls.SelectedDatesCollection);
            _typeTable[12] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTime>);
            _typeTable[13] = typeof(global::System.Collections.ObjectModel.Collection<global::System.DateTime>);
            _typeTable[14] = typeof(global::System.DateTime);
            _typeTable[15] = typeof(global::System.Int32);
            _typeTable[16] = typeof(global::System.DateTimeKind);
            _typeTable[17] = typeof(global::System.Int64);
            _typeTable[18] = typeof(global::System.TimeSpan);
            _typeTable[19] = typeof(global::WinRTXamlToolkit.Controls.CalendarBlackoutDatesCollection);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WinRTXamlToolkit.Controls.CalendarDateRange>);
            _typeTable[21] = typeof(global::System.Collections.ObjectModel.Collection<global::WinRTXamlToolkit.Controls.CalendarDateRange>);
            _typeTable[22] = typeof(global::WinRTXamlToolkit.Controls.CalendarDateRange);
            _typeTable[23] = typeof(global::ResultsTracker.CalendarPage);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[26] = typeof(global::ResultsTracker.LoginPage);
            _typeTable[27] = typeof(global::ResultsTracker.RTPage);
            _typeTable[28] = typeof(global::ResultsTracker.Common.NavigationHelper);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[30] = typeof(global::ResultsTracker.MainPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Calendar() { return new global::WinRTXamlToolkit.Controls.Calendar(); }
        private object Activate_12_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTime>(); }
        private object Activate_13_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.DateTime>(); }
        private object Activate_20_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WinRTXamlToolkit.Controls.CalendarDateRange>(); }
        private object Activate_21_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WinRTXamlToolkit.Controls.CalendarDateRange>(); }
        private object Activate_23_CalendarPage() { return new global::ResultsTracker.CalendarPage(); }
        private object Activate_26_LoginPage() { return new global::ResultsTracker.LoginPage(); }
        private object Activate_27_RTPage() { return new global::ResultsTracker.RTPage(); }
        private object Activate_30_MainPage() { return new global::ResultsTracker.MainPage(); }
        private void VectorAdd_11_SelectedDatesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTime>)instance;
            var newItem = (global::System.DateTime)item;
            collection.Add(newItem);
        }
        private void VectorAdd_12_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTime>)instance;
            var newItem = (global::System.DateTime)item;
            collection.Add(newItem);
        }
        private void VectorAdd_13_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTime>)instance;
            var newItem = (global::System.DateTime)item;
            collection.Add(newItem);
        }
        private void VectorAdd_19_CalendarBlackoutDatesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRTXamlToolkit.Controls.CalendarDateRange>)instance;
            var newItem = (global::WinRTXamlToolkit.Controls.CalendarDateRange)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRTXamlToolkit.Controls.CalendarDateRange>)instance;
            var newItem = (global::WinRTXamlToolkit.Controls.CalendarDateRange)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRTXamlToolkit.Controls.CalendarDateRange>)instance;
            var newItem = (global::WinRTXamlToolkit.Controls.CalendarDateRange)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  WinRTXamlToolkit.Controls.Calendar
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_Calendar;
                userType.AddMemberName("CalendarButtonStyle");
                userType.AddMemberName("CalendarDayButtonStyle");
                userType.AddMemberName("CalendarItemStyle");
                userType.AddMemberName("IsTodayHighlighted");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("FirstDayOfWeek");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedDate");
                userType.AddMemberName("SelectedDates");
                userType.AddMemberName("BlackoutDates");
                userType.AddMemberName("DisplayDate");
                userType.AddMemberName("DisplayDateStart");
                userType.AddMemberName("DisplayDateEnd");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Style
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  WinRTXamlToolkit.Controls.CalendarMode
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Month", global::WinRTXamlToolkit.Controls.CalendarMode.Month);
                userType.AddEnumValue("Year", global::WinRTXamlToolkit.Controls.CalendarMode.Year);
                userType.AddEnumValue("Decade", global::WinRTXamlToolkit.Controls.CalendarMode.Decade);
                xamlType = userType;
                break;

            case 5:   //  System.Enum
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 6:   //  System.ValueType
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 7:   //  Object
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  System.DayOfWeek
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Sunday", global::System.DayOfWeek.Sunday);
                userType.AddEnumValue("Monday", global::System.DayOfWeek.Monday);
                userType.AddEnumValue("Tuesday", global::System.DayOfWeek.Tuesday);
                userType.AddEnumValue("Wednesday", global::System.DayOfWeek.Wednesday);
                userType.AddEnumValue("Thursday", global::System.DayOfWeek.Thursday);
                userType.AddEnumValue("Friday", global::System.DayOfWeek.Friday);
                userType.AddEnumValue("Saturday", global::System.DayOfWeek.Saturday);
                xamlType = userType;
                break;

            case 9:   //  WinRTXamlToolkit.Controls.CalendarSelectionMode
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("SingleDate", global::WinRTXamlToolkit.Controls.CalendarSelectionMode.SingleDate);
                userType.AddEnumValue("SingleRange", global::WinRTXamlToolkit.Controls.CalendarSelectionMode.SingleRange);
                userType.AddEnumValue("MultipleRange", global::WinRTXamlToolkit.Controls.CalendarSelectionMode.MultipleRange);
                userType.AddEnumValue("None", global::WinRTXamlToolkit.Controls.CalendarSelectionMode.None);
                xamlType = userType;
                break;

            case 10:   //  System.Nullable`1<System.DateTime>
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  WinRTXamlToolkit.Controls.SelectedDatesCollection
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<System.DateTime>"));
                userType.CollectionAdd = VectorAdd_11_SelectedDatesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.Collections.ObjectModel.ObservableCollection`1<System.DateTime>
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<System.DateTime>"));
                userType.Activator = Activate_12_ObservableCollection;
                userType.CollectionAdd = VectorAdd_12_ObservableCollection;
                xamlType = userType;
                break;

            case 13:   //  System.Collections.ObjectModel.Collection`1<System.DateTime>
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_Collection;
                userType.CollectionAdd = VectorAdd_13_Collection;
                xamlType = userType;
                break;

            case 14:   //  System.DateTime
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Date");
                userType.AddMemberName("Day");
                userType.AddMemberName("DayOfWeek");
                userType.AddMemberName("DayOfYear");
                userType.AddMemberName("Hour");
                userType.AddMemberName("Kind");
                userType.AddMemberName("Millisecond");
                userType.AddMemberName("Minute");
                userType.AddMemberName("Month");
                userType.AddMemberName("Second");
                userType.AddMemberName("Ticks");
                userType.AddMemberName("TimeOfDay");
                userType.AddMemberName("Year");
                xamlType = userType;
                break;

            case 15:   //  Int32
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  System.DateTimeKind
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unspecified", global::System.DateTimeKind.Unspecified);
                userType.AddEnumValue("Utc", global::System.DateTimeKind.Utc);
                userType.AddEnumValue("Local", global::System.DateTimeKind.Local);
                xamlType = userType;
                break;

            case 17:   //  Int64
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  TimeSpan
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  WinRTXamlToolkit.Controls.CalendarBlackoutDatesCollection
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<WinRTXamlToolkit.Controls.CalendarDateRange>"));
                userType.CollectionAdd = VectorAdd_19_CalendarBlackoutDatesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.ObservableCollection`1<WinRTXamlToolkit.Controls.CalendarDateRange>
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WinRTXamlToolkit.Controls.CalendarDateRange>"));
                userType.Activator = Activate_20_ObservableCollection;
                userType.CollectionAdd = VectorAdd_20_ObservableCollection;
                xamlType = userType;
                break;

            case 21:   //  System.Collections.ObjectModel.Collection`1<WinRTXamlToolkit.Controls.CalendarDateRange>
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_Collection;
                userType.CollectionAdd = VectorAdd_21_Collection;
                xamlType = userType;
                break;

            case 22:   //  WinRTXamlToolkit.Controls.CalendarDateRange
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Start");
                userType.AddMemberName("End");
                xamlType = userType;
                break;

            case 23:   //  ResultsTracker.CalendarPage
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_CalendarPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  ResultsTracker.LoginPage
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_LoginPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  ResultsTracker.RTPage
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_RTPage;
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  ResultsTracker.Common.NavigationHelper
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  ResultsTracker.MainPage
                userType = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("ResultsTracker.RTPage"));
                userType.Activator = Activate_30_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::WinRTXamlToolkit.Controls.WinRTXamlToolkit_Controls_Calendar_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Calendar_CalendarButtonStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.CalendarButtonStyle;
        }
        private void set_0_Calendar_CalendarButtonStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.CalendarButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_1_Calendar_CalendarDayButtonStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.CalendarDayButtonStyle;
        }
        private void set_1_Calendar_CalendarDayButtonStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.CalendarDayButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_2_Calendar_CalendarItemStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.CalendarItemStyle;
        }
        private void set_2_Calendar_CalendarItemStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.CalendarItemStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_3_Calendar_IsTodayHighlighted(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.IsTodayHighlighted;
        }
        private void set_3_Calendar_IsTodayHighlighted(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.IsTodayHighlighted = (global::System.Boolean)Value;
        }
        private object get_4_Calendar_DisplayMode(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.DisplayMode;
        }
        private void set_4_Calendar_DisplayMode(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.DisplayMode = (global::WinRTXamlToolkit.Controls.CalendarMode)Value;
        }
        private object get_5_Calendar_FirstDayOfWeek(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.FirstDayOfWeek;
        }
        private void set_5_Calendar_FirstDayOfWeek(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.FirstDayOfWeek = (global::System.DayOfWeek)Value;
        }
        private object get_6_Calendar_SelectionMode(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.SelectionMode;
        }
        private void set_6_Calendar_SelectionMode(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.SelectionMode = (global::WinRTXamlToolkit.Controls.CalendarSelectionMode)Value;
        }
        private object get_7_Calendar_SelectedDate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.SelectedDate;
        }
        private void set_7_Calendar_SelectedDate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.SelectedDate = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_8_Calendar_SelectedDates(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.SelectedDates;
        }
        private object get_9_DateTime_Date(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Date;
        }
        private object get_10_DateTime_Day(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Day;
        }
        private object get_11_DateTime_DayOfWeek(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.DayOfWeek;
        }
        private object get_12_DateTime_DayOfYear(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.DayOfYear;
        }
        private object get_13_DateTime_Hour(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Hour;
        }
        private object get_14_DateTime_Kind(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Kind;
        }
        private object get_15_DateTime_Millisecond(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Millisecond;
        }
        private object get_16_DateTime_Minute(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Minute;
        }
        private object get_17_DateTime_Month(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Month;
        }
        private object get_18_DateTime_Second(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Second;
        }
        private object get_19_DateTime_Ticks(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Ticks;
        }
        private object get_20_DateTime_TimeOfDay(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.TimeOfDay;
        }
        private object get_21_DateTime_Year(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Year;
        }
        private object get_22_Calendar_BlackoutDates(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.BlackoutDates;
        }
        private object get_23_CalendarDateRange_Start(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CalendarDateRange)instance;
            return that.Start;
        }
        private object get_24_CalendarDateRange_End(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CalendarDateRange)instance;
            return that.End;
        }
        private object get_25_Calendar_DisplayDate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.DisplayDate;
        }
        private void set_25_Calendar_DisplayDate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.DisplayDate = (global::System.DateTime)Value;
        }
        private object get_26_Calendar_DisplayDateStart(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.DisplayDateStart;
        }
        private void set_26_Calendar_DisplayDateStart(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.DisplayDateStart = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_27_Calendar_DisplayDateEnd(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            return that.DisplayDateEnd;
        }
        private void set_27_Calendar_DisplayDateEnd(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.Calendar)instance;
            that.DisplayDateEnd = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_28_RTPage_NavigationHelper(object instance)
        {
            var that = (global::ResultsTracker.RTPage)instance;
            return that.NavigationHelper;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "WinRTXamlToolkit.Controls.Calendar.CalendarButtonStyle":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "CalendarButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_Calendar_CalendarButtonStyle;
                xamlMember.Setter = set_0_Calendar_CalendarButtonStyle;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.CalendarDayButtonStyle":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "CalendarDayButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Calendar_CalendarDayButtonStyle;
                xamlMember.Setter = set_1_Calendar_CalendarDayButtonStyle;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.CalendarItemStyle":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "CalendarItemStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_Calendar_CalendarItemStyle;
                xamlMember.Setter = set_2_Calendar_CalendarItemStyle;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.IsTodayHighlighted":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "IsTodayHighlighted", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_Calendar_IsTodayHighlighted;
                xamlMember.Setter = set_3_Calendar_IsTodayHighlighted;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.DisplayMode":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "DisplayMode", "WinRTXamlToolkit.Controls.CalendarMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_Calendar_DisplayMode;
                xamlMember.Setter = set_4_Calendar_DisplayMode;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.FirstDayOfWeek":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "FirstDayOfWeek", "System.DayOfWeek");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_Calendar_FirstDayOfWeek;
                xamlMember.Setter = set_5_Calendar_FirstDayOfWeek;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.SelectionMode":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "SelectionMode", "WinRTXamlToolkit.Controls.CalendarSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_Calendar_SelectionMode;
                xamlMember.Setter = set_6_Calendar_SelectionMode;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.SelectedDate":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "SelectedDate", "System.Nullable`1<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_Calendar_SelectedDate;
                xamlMember.Setter = set_7_Calendar_SelectedDate;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.SelectedDates":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "SelectedDates", "WinRTXamlToolkit.Controls.SelectedDatesCollection");
                xamlMember.Getter = get_8_Calendar_SelectedDates;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Date":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_9_DateTime_Date;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Day":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Day", "Int32");
                xamlMember.Getter = get_10_DateTime_Day;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.DayOfWeek":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "DayOfWeek", "System.DayOfWeek");
                xamlMember.Getter = get_11_DateTime_DayOfWeek;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.DayOfYear":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "DayOfYear", "Int32");
                xamlMember.Getter = get_12_DateTime_DayOfYear;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Hour":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Hour", "Int32");
                xamlMember.Getter = get_13_DateTime_Hour;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Kind":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Kind", "System.DateTimeKind");
                xamlMember.Getter = get_14_DateTime_Kind;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Millisecond":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Millisecond", "Int32");
                xamlMember.Getter = get_15_DateTime_Millisecond;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Minute":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Minute", "Int32");
                xamlMember.Getter = get_16_DateTime_Minute;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Month":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Month", "Int32");
                xamlMember.Getter = get_17_DateTime_Month;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Second":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Second", "Int32");
                xamlMember.Getter = get_18_DateTime_Second;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Ticks":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Ticks", "Int64");
                xamlMember.Getter = get_19_DateTime_Ticks;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.TimeOfDay":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "TimeOfDay", "TimeSpan");
                xamlMember.Getter = get_20_DateTime_TimeOfDay;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Year":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Year", "Int32");
                xamlMember.Getter = get_21_DateTime_Year;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.Calendar.BlackoutDates":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "BlackoutDates", "WinRTXamlToolkit.Controls.CalendarBlackoutDatesCollection");
                xamlMember.Getter = get_22_Calendar_BlackoutDates;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.CalendarDateRange.Start":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CalendarDateRange");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "Start", "System.DateTime");
                xamlMember.Getter = get_23_CalendarDateRange_Start;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.CalendarDateRange.End":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CalendarDateRange");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "End", "System.DateTime");
                xamlMember.Getter = get_24_CalendarDateRange_End;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.Calendar.DisplayDate":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "DisplayDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_Calendar_DisplayDate;
                xamlMember.Setter = set_25_Calendar_DisplayDate;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.DisplayDateStart":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "DisplayDateStart", "System.Nullable`1<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_Calendar_DisplayDateStart;
                xamlMember.Setter = set_26_Calendar_DisplayDateStart;
                break;
            case "WinRTXamlToolkit.Controls.Calendar.DisplayDateEnd":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Calendar");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "DisplayDateEnd", "System.Nullable`1<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_Calendar_DisplayDateEnd;
                xamlMember.Setter = set_27_Calendar_DisplayDateEnd;
                break;
            case "ResultsTracker.RTPage.NavigationHelper":
                userType = (global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ResultsTracker.RTPage");
                xamlMember = new global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ResultsTracker.Common.NavigationHelper");
                xamlMember.Getter = get_28_RTPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ResultsTracker.ResultsTracker_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}



